总结下这段时间所学到的东西,
第一周主要看secp256k1算法,理解签名,加密,公钥,私钥之间的关系,通过看key相关的代码,
看比特币如何调用相应的api来得到私钥和公钥,以及对数据进行签名,验证.做demo测试.
理解aes加密算法的相关概念,看懂比特币代码对于aes代码的封装. 看chacha20,ripemd160
和sha系列信息摘要算法. uint256数据结构,arith_uint256大整数表示方法.
这几部分相对独立,通过做demo加深理解.

第二周主要看交易,共识和脚本相关的代码,由于对比特币的诸多概念不理解,
不知道该从哪里开始看,拆分功能时,没有清晰的逻辑导致很多和功能无关的
代码被一起拆出来了,加大了工作量.
交易部分主要是学习merkle树这种数据结构,理解这种数据结构在比特币代码中的作用,
以及之前看到的uint256在merkle树中的作用,还有hash函数的使用,
比特币利用merkle树怎么存储和验证交易信息.
共识方面主要看区块和交易的构成,涉及到了很多概念性的东西,通过看博客,
官方文档和对应代码理解相关概念,搞明白各个类的作用,和相互之间的关系.
脚本方面主要是理解代码中定义的各种操作符的意思,和在代码中使用的方式是,
如何利用这些操作符来实现一个脚本,以及解析脚本中的数据进行验证.
交易包含共识,共识当中有包含脚本,脚本的验证又涉及到key和签名.

第三周主要是跟踪比特币的代码流程,
第一天通过sendtoaddress跟踪交易部分代码,一笔交易的构成,手续费的计算,
脚本的签名,交易信息的广播.遇到的问题:为什么需要一次空的签名,
广播交易的时候为什么需要添加到mempool中.
第二天主要是在第一天的基础上,看一个wallet的产生,涉及到了钱包,
数据库和网络相关的业务.首先读取本地钱包数据到内存,
然后从网络上下载交易信息到钱包,最后是否广播交易.这里遇到了ZapWalletTx这个函数,
刚刚通过网络了解到了这个函数实现的功能,但是具体的作用还不是很清晰.
后续几天主要是跟着大家一起过12个step,

第一步主要是设置环境,例如内存分配失败的回调函数,信号的注册等.
第二步解析命令行参数和获取操作系统为每个进程分配的资源限制(struct rlimit)
第三步也是解析参数并做相应的设置,mempool的大小,rpc的注册以及手续费相关的变量的赋值.
第四步初始化secp256k1算法需要的数据,然后调用LockDataDirectory
创建了一个文件,然后创建了一个static的lock锁定了该文件.
第四a步主要是用scheduler创建一个线程进行任务的调度,
最后调用了AppInitServers启动了rpc和http服务器
第五步首先解析了命令行的参数,然后尝试打开数据库文件,如果打开失败两次
就真的失败了,然后验证数据库文件(会尝试恢复数据);
第六步首先初始化了peerlogic,设置信号对应的槽,然后解析命令行dns,proxy,zmq等
第七步加载区块index,先是判断是否需要重新索引,
然后设置了一些加载区块需要的变量,清除之前的区块信息,
加载index,加载genesis块,重新索引(ReplayBlocks),然后加载tip(可能分叉),然后判断是是否分叉,
将数据库倒回到没有分叉的时候,最后验证数据库.
第八步加载钱包,先从数据库加载钱包.如果是第一次运行则为钱包创建秘钥池,并从秘钥
池中取出一个公钥,然后在数据库中写入一个空的区块.
然后根据命令行参数是否需要从genesis开始重新加载交易数据.
最后开始遍历所有的区块中交易的数据,写入钱包db.
第九步是否需要裁剪区块
第十步加载区块,首先检查磁盘空间是否足够,然后开启线程加载区块,找到最长的链,加载区块
第十一步启动节点,首先加载存储节点的文件,解析当中的节点数据, banlist.dat和peers.dat.
之后启动五个主要的工作线程,例如ThreadMessageHandler等.
第十二步,开启rpc的调用,如果加载了钱包,就定期刷新钱包.返回appinit函数,
	    定期检测是否关闭进程.
通过一周的代码跟踪,对比特币有了更深的了解,共识是怎么在代码中实现的,块的同步和加载,
最长链的判断,分叉之后如何找到最长链.但是还有许多细节没有理解.

第四周主要是修改比特币源代码并编译,运行.创始块的计算,交易共识的修改,种子节点的添加.
跟踪两个用来挖矿的代码,libblkmaker和cpuminer.
主要看这两个代码是如何计算符合条件的hash的.libblkmaker虽然没有有效的计算出结果.
但是弄清了计算的过程,为看cpuminer代码带来了很大帮助.
将cpuminer代码运行起来之后,开始分析其中的实现细节,
加以修改,使其不仅可以用来挖矿,也可以计算创始块.

以上就是这段时间做的工作,从刚开始的没有听说过比特币的概念,到现在修改比特币的源代码.
对区块链技术有了很深的认识,尤其是共识部分,如何保证公平,公正.
技术方面,再一次的感受到boost库的强大和包罗万象,线程组,文件操作,信号和槽.
同时也发现自己知识的匮乏.最重要的是自己解决问题的方法.
很多以前忽视的方面,在这段时间都暴露出来了.

第一周:刚开始,不知如何下手,浪费了很多时间在代码细节上,逻辑不清晰导致拆分一些功能时失败.
第二周,在看代码的过程中,对于右值引用和完美转发的语法不是很熟悉.
第三周,线程组,信号和槽以及多线程间如何利用锁.
第四周,在看cpuminer的代码的时候,涉及到了生产和消费者模型,
对这方面只是概念上清楚,代码上的具体实现还有很多问题.
还有一些系统级别提供的api,以前也是没有用过,例如进程分配
资源的结构体struct rlimit,修改线程名字的prctl函数.

接下来,针对这段时间出现的问题,针对性的解决,技术上继续学习.
对于比特币代码继续研究,深入细节,哪里不清楚就看哪里.